{
	"secret.in_screenshot": {
		"prefix": "secret.in_screenshot",
		"body": "secret.in_screenshot()",
		"description": "If a screenshot or screen capture is currently being taken. It returns true if a screenshot is being captured, otherwise false."
	},
	"secret.start_prediction": {
		"prefix": "secret.start_prediction",
		"body": "secret.start_prediction(${1:cmd})",
		"description": "Initiates engine prediction. It is used in the CreateMove hook, to enhance the precision of actions such as aimbot targeting."
	},
	"secret.end_prediction": {
		"prefix": "secret.end_prediction",
		"body": "secret.end_prediction()",
		"description": "Terminates engine prediction. It should be called after invoking secret.start_prediction to finalize the prediction process."
	},
	"secret.net_setcvar": {
		"prefix": "secret.net_setcvar",
		"body": "secret.net_setcvar(\"${1:cvar}\", \"${2:value}\")",
		"description": "Call secret.net_setcvar with the name of the cvar (as a string) and the desired value (also as a string) to set the network variable to the specified value."
	},
	"secret.net_disconnect": {
		"prefix": "secret.net_disconnect",
		"body": "secret.net_disconnect(\"${1:reason}\")",
		"description": "Allows you to disconnect from a server with a custom disconnect reason."
	},
	"secret.get_freecam_data": {
		"prefix": "secret.get_freecam_data",
		"body": "secret.get_freecam_data()",
		"description": "Retrieves the position and angles of the freecam, if it is currently active."
	},
	"secret.notify": {
		"prefix": "secret.notify",
		"body": "secret.notify(\"${1:text}\", ${1|0,1,2,3|})",
		"description": "Creates a new notification at the top left corner of the screen with the specified text and notif type."
	},
	"secret.log": {
		"prefix": "secret.log",
		"body": "secret.log(\"${1:text}\", ${2|1,2,3,4|}, ${3|true,false|})",
		"description": "Logs a message onto a custom console with the specified text and log type and date."
	},
	"secret.get_username": {
		"prefix": "secret.get_username",
		"body": "secret.get_username()",
		"description": "Retrieves the current username in the cheat."
	},
	"secret.lua_to_c_function": {
		"prefix": "secret.lua_to_c_function",
		"body": "secret.lua_to_c_function(${1:func})",
		"description": "Converts a Lua function into a C-style Lua function."
	},
	"secret.config_set": {
		"prefix": "secret.config_set",
		"body": "secret.config_set(\"${1:key}\", ${2:value})",
		"description": "Sets a configuration value identified by the specified key to the desired value."
	},
	"secret.config_get": {
		"prefix": "secret.config_get",
		"body": "secret.config_get(\"${1:key}\")",
		"description": "allows you to disconnect from a server with a custom disconnect reason."
	},
	"secret.create_checkbox": {
		"prefix": "secret.create_checkbox",
		"body": "secret.create_checkbox(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\")",
		"description": "Creates a checkbox UI element within the specified tab and groupbox of the menu."
	},
	"secret.create_button": {
		"prefix": "secret.create_button",
		"body": "secret.create_button(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:callback/func}\")",
		"description": "Creates a button UI element within the specified tab and groupbox of the menu. When the button is clicked, the specified callback function is invoked."
	},
	"secret.create_slider": {
		"prefix": "secret.create_slider",
		"body": "secret.create_slider(\"${1:tab}\", \"${2:groupbox}\", \"${3:min}\", \"${4:max}\", \"${5:name}\", \"${6:config_name}\")",
		"description": "Creates a slider UI element within the specified tab and groupbox of the menu."
	},
	"secret.add_command": {
		"prefix": "secret.add_command",
		"body": "secret.add_command(\"${1:name}\", \"${2:description}\", function(${3:args}) \n\nend)",
		"description": "Creates a custom console command with the specified name and description."
	},
	"secret.remove_command": {
		"prefix": "secret.remove_command",
		"body": "secret.remove_command(\"${1:name}\") ",
		"description": "Removes an existing custom console command with the specified name"
	},
	"secret.menu_open": {
		"prefix": "secret.menu_open",
		"body": "secret.menu_open()",
		"description": "Whether the menu is currently open and returns a boolean value indicating its status."
	},
	"secret.event_listen": {
		"prefix": "secret.event_listen",
		"body": "secret.event_listen(\"${1|view_render_post,think|}\", \"${2:handler_name}\", function() \n\nend)",
		"description": "Adds an event handler for the specified event."
	},
	"secret.event_remove": {
		"prefix": "secret.event_remove",
		"body": "secret.event_remove(\"${1:event}\", \"${2:handler_name}\")",
		"description": "Removes an event handler associated with the specified event and handler name."
	},

	"secret.create_hotkey": {
		"prefix": "secret.create_hotkey",
		"body": "secret.create_hotkey(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\", \"${5:hotkey_display}\")",
		"description": "Creates a hotkey UI element within the specified tab and groupbox of the menu."
	},

	"secret.create_colorpicker": {
		"prefix": "secret.create_colorpicker",
		"body": "secret.create_colorpicker(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\")",
		"description": "Creates a colorpicker UI element within the specified tab and groupbox of the menu."
	},

	"secret.hookfunc": {
		"prefix": "secret.hookfunc",
		"body": "secret.hookfunc(${1:func}, ${2:hook})",
		"description": "Hooks a Lua function func with another Lua function hook, replacing the original function with the hook. It returns the original function, allowing the hook to call it to continue the execution of the hooked function."
	},

	"secret.mouse_event": {
		"prefix": "secret.mouse_event",
		"body": "secret.mouse_event(\"${1:dwFlags}\", ${2:dx}, ${3:dy}, ${4:dwData})",
		"description": "Simulates a mouse event by specifying various parameters such as flags, delta x, delta y, and data."
	},
	"secret.keybd_event": {
		"prefix": "secret.keybd_event",
		"body": "secret.keybd_event(\"${1:bVk}\", ${2:bScan}, \"${3:dwFlags}\", ${4:dwExtraInfo})",
		"description": "Synthesizes a keystroke. It generates a keystroke down message, a keystroke up message, or a system keystroke."
	},
	"secret.create_inputbox": {
		"prefix": "secret.create_inputbox",
		"body": "secret.create_inputbox(\"${1:tab}\", \"${2:groupbox}\", \"${3:name}\", \"${4:config_name}\")",
		"description": "Creates an input box UI element within the specified tab and groupbox of the menu."
	},
	"secret.console_open": {
		"prefix": "secret.console_open",
		"body": "secret.console_open()",
		"description": "Checks whether the console is currently open and returns a boolean value indicating its status."
	},
	"secret.readfile": {
		"prefix": "secret.readfile",
		"body": "secret.readfile(${1:path})",
		"description": "Reads the file at the given path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.writefile": {
		"prefix": "secret.writefile",
		"body": "secret.writefile(\"${1:path}\", ${2:contents})",
		"description": "Writes the provided content to the file at the given path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.appendfile": {
		"prefix": "secret.appendfile",
		"body": "secret.appendfile(\"${1:path}\", ${2:contents})",
		"description": "Appends the provided content to the file at the given path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.listfiles": {
		"prefix": "secret.listfiles",
		"body": "secret.listfiles(\"${1:folder}\")",
		"description": "Returns a table of all files within a folder. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.isfile": {
		"prefix": "secret.isfile",
		"body": "secret.isfile(\"${1:path}\")",
		"description": "Returns if the path provided is a file. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.isfolder": {
		"prefix": "secret.isfolder",
		"body": "secret.isfolder(\"${1:path}\")",
		"description": "Returns if the path provided is a folder. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.makefolder": {
		"prefix": "secret.makefolder",
		"body": "secret.makefolder(\"${1:path}\")",
		"description": "Creates a folder at the specified path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.deletefolder": {
		"prefix": "secret.deletefolder",
		"body": "secret.deletefolder(\"${1:path}\")",
		"description": "Deletes a folder at the specified path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
	"secret.deletefile": {
		"prefix": "secret.deletefile",
		"body": "secret.deletefile(\"${1:path}\")",
		"description": "Deletes a file at the specified path. (All functions within the File API are locked to the \"workspace\" folder inside of the secretservice directory)"
	},
}